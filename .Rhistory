a <- available.packages ()
head(rownames(a), 3)
head(rownames(k), 10)
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("slidify")
install.packages("ggplot2")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
"     defaults write org.R-project.R force.LANG en_US.UTF-8
"
install.packages("KernSmooth")
"     defaults write org.R-project.R force.LANG en_US.UTF-8
"
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
x <- 1:20
x
x <- c(4, TRUE)
class
class()
class (x)
x <- 4
class (x)
y <- c(4, TRUE)
class (y)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a","b",TRUE)
x
x[[2]]
x <- 1:4
y <- 2:3
z <- x+y
z
class (z)
class (x)
x <- c(3,5,1,10,12,6)
x[x<=5] <- 0
x
clear
hw1_data <- read.csv("~/datasciencecoursera/datasciencecoursera/hw1_data.csv")
View(hw1_data)
is.na(Ozone)
is.na
hw1_data$Ozone
x <- hw1_data$Ozone
x
is.na (x)
bad <- is.na (x)
x(!bad)
x[!bad]
x
mean x[!bad]
install.packages("swirl")
library("swirl")
ls()
mean(x)
y <- x[!bad]
y
mean(y)
rm(list=ls())
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x & x>0)]
x[!is.na(x) & x > 0]
z <- x[c(3,5,7)]
z <- x[vector c(3,5,7)]
info()
Z <- x[c( 3,5,7)]
[c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
indentical(vect,vect2)
identifcal(vect, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
rm(list)
rm(list(ls))
rm(list=ls())
hw1_data
hw1_data <- read.csv("~/datasciencecoursera/datasciencecoursera/hw1_data.csv")
View(hw1_data)
hw1_data
x <- hw1_data[Month = 6]
hw1_data
x <- hw1_data["Month" = 6]
x <- hw1_data[c("Month" = 6)]
x
x <- hw1_data[c("Temp", Month = 6)]
x <- hw1_data[ c("Temp", "Month" = 6)]
x <- hw1_data[[c("Temp", "Month" = 6)]]
x <- hw1_data$Temp
x
x <- hw1_data$Temp[c("Month" = 6)]
x
x <- hw1_data$Temp, hw1_data$Month=6
x <- hw1_data$Temp
x
x <- hw1_data[c("Temp", 32:61)]
x <- hw1_data[c(32:61)]
x <- hw1_data[c(32,61)]
hw1_data
x <- hw1_data[[c(32:61)]]
hw1_data[[c(32,61)]]
x <- hw1_data$Temp
x
x <- hw1_data$Temp(32)
x <- subset(hw1_data, Month = 6)
x
x <- subset(hw1_data, Month ==6)
x
mean Temp
mean (Temp)
y <- x$Temp
y
mean(y)
z <- subset(hw1_data, Ozone ==31, Temp == 90)
z
a <- subset(hw1_data, Ozone --31)
a <- subset(hw1_data, Ozone ==31)
a
z <- subset(hw1_data, Ozone > 31, Temp > 90)
z
a <- subset(hw1_data, Ozone >31)
a
z <- subset(a, Temp > 90)
z
s <- z$Solar.R
s
mean(s)
x <-list(2,"a","b",TRUE)
x
x[[2]]
rm
setwd("~/datasciencecoursera/datasciencecoursera")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
root_dir <- "c:/Users/Mark/datasciencecoursera/datasciencecoursera/specdata/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
data <- do.call("rbind", lapply(paste(root_dir, directory, "/", filenames, sep=""), read.csv, header = TRUE))
subset_data <- subset(data, data[, "ID"] %in% id)
return(mean(na.omit(subset_data[,pollutant])))
}
pollutantmean("specdata", "sulfate", 1:10)
root_dir <- "c:/Users/Mark/datasciencecoursera/datasciencecoursera/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
data <- do.call("rbind", lapply(paste(root_dir, directory, "/", filenames, sep=""), read.csv, header = TRUE))
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate" 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
root_dir <- "c:/users/Mark/datasciencecoursera/datasciencecoursera/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
pollutantmean("specdata", "sulfate", 1:10)
root_dir <- "c:/users/Mark/datasciencecoursera/datasciencecoursera/specdata"
pollutantmean("specdata", "sulfate", 1:10)
root_dir <- "c:/users/Mark/datasciencecoursera/datasciencecoursera/"
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
root_dir <- "c:/users/Mark/datasciencecoursera/datasciencecoursera/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
data <- do.call("rbind", lapply(paste(root_dir, directory, "/", filenames, sep=""), read.csv, header = TRUE))
subset_data <- subset(data, data[, "ID"] %in% id)
return(mean(na.omit(subset_data[,pollutant])))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
root_dir <- "c:/Users/Mark/datasciencecoursera/datasciencecoursera/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
data <- do.call("rbind", lapply(paste(root_dir, directory, "/", filenames, sep=""), read.csv, header = TRUE))
subset_data <- subset(data, data[, "ID"] %in% id)
return(mean(na.omit(subset_data[,pollutant])))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
root_dir <- "c:/Mark/datasciencecoursera/datasciencecoursera/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
data <- do.call("rbind", lapply(paste(root_dir, directory, "/", filenames, sep=""), read.csv, header = TRUE))
subset_data <- subset(data, data[, "ID"] %in% id)
return(mean(na.omit(subset_data[,pollutant])))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
root_dir <- "c:/datasciencecoursera/datasciencecoursera/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
data <- do.call("rbind", lapply(paste(root_dir, directory, "/", filenames, sep=""), read.csv, header = TRUE))
subset_data <- subset(data, data[, "ID"] %in% id)
return(mean(na.omit(subset_data[,pollutant])))
}
pollutantmean("specdata", "sulfate", 1:10)
root_dir <- "c:/users/Mark/datasciencecoursera/datasciencecoursera/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
pollutantmean <- function(directory, pollutant, id = 1:332) {
root_dir <- "/users/Mark/datasciencecoursera/datasciencecoursera/"
filenames <- list.files(path = paste(root_dir, directory, "/", sep=""))
data <- do.call("rbind", lapply(paste(root_dir, directory, "/", filenames, sep=""), read.csv, header = TRUE))
subset_data <- subset(data, data[, "ID"] %in% id)
return(mean(na.omit(subset_data[,pollutant])))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
4
submit()
complete <- function(directory, id = 1:332) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'id' is an integer vector indicating the
# monitor ID numbers to be used Return a data frame of the form: id nobs 1
# 117 2 1041 ...  where 'id' is the monitor ID number and 'nobs' is the
# number of complete cases
# --- Assert create an empty vector
nobsNum <- numeric(0)
for (cid in id) {
# --- Assert get data frame as ID
cDfr <- getmonitor(cid, directory)
# --- Assert count the number of complete cases and append to numeric
# vector
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
# --- Assert return value is a data frame with TWO (2) columns
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
# --- Assert 'id' is a vector of length 1 indicating the monitor ID
# number. The user can specify 'id' as either an integer, a character, or
# a numeric.  'directory' is a character vector of length 1 indicating the
# location of the CSV files 'summarize' is a logical indicating whether a
# summary of the data should be printed to the console; the default is
# FALSE
# --- Assert construct file name Directory is pre-appended to file name.
# Use sprintf() to add leading zeroes.  E.g. 'specdata/001.csv'
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
# --- Assert read csv
rawDfr <- read.csv(fileStr)
# --- Assert summary if true
if (summarize) {
print(summary(rawDfr))
}
# --- Return value is a data frame
return(rawDfr)
}
complete("specdata", 1)
complete("specdata, c(2,3,8,10,12")
complete("specdata", c(2,3,8,10,12")
complete("specdata", c(2,3,8,10,12"))
complete("specdata", c(2,3,8,10,12))
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'threshold' is a numeric vector of length 1
# indicating the number of completely observed observations (on all
# variables) required to compute the correlation between nitrate and
# sulfate; the default is 0.  Return a numeric vector of correlations.
# --- Assert create an empty numeric vector
corrsNum <- numeric(0)
# --- Assert get a data frame as ID = 1:332
nobsDfr <- complete("specdata")
# --- Assert apply threshold
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for (cid in nobsDfr$id) {
# --- Assert get a data frame as ID in $id
monDfr <- getmonitor(cid, directory)
# --- Assert calculate correlation between $sulfate and $nitrate
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
# --- Assert return value is a numeric vector of correlations
return(corrsNum)
}
complete <- function(directory, id = 1:332) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'id' is an integer vector indicating the
# monitor ID numbers to be used Return a data frame of the form: id nobs 1
# 117 2 1041 ...  where 'id' is the monitor ID number and 'nobs' is the
# number of complete cases
# --- Assert create an empty vector
nobsNum <- numeric(0)
for (cid in id) {
# --- Assert get data frame as ID
cDfr <- getmonitor(cid, directory)
# --- Assert count the number of complete cases and append to numeric
# vector
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
# --- Assert return value is a data frame with TWO (2) columns
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
# --- Assert 'id' is a vector of length 1 indicating the monitor ID
# number. The user can specify 'id' as either an integer, a character, or
# a numeric.  'directory' is a character vector of length 1 indicating the
# location of the CSV files 'summarize' is a logical indicating whether a
# summary of the data should be printed to the console; the default is
# FALSE
# --- Assert construct file name Directory is pre-appended to file name.
# Use sprintf() to add leading zeroes.  E.g. 'specdata/001.csv'
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
# --- Assert read csv
rawDfr <- read.csv(fileStr)
# --- Assert summary if true
if (summarize) {
print(summary(rawDfr))
}
# --- Return value is a data frame
return(rawDfr)
}
cr <- corr("specdat", 150)
cr <- corr("specdata", 150)
head(cr)
complete <- function(directory, id = 1:332) {
# --- Assert create an empty vector
nobsNum <- numeric(0)
for (countid in id) {
# --- Assert get data frame as ID
cDfr <- getmonitor(countid, directory)
# --- Assert count the number of complete cases and append to numeric
# vector
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
# --- Assert return value is a data frame with TWO (2) columns
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
# --- Assert 'id' is a vector of length 1 indicating the monitor ID
# number. The user can specify 'id' as either an integer, a character, or
# a numeric.  'directory' is a character vector of length 1 indicating the
# location of the CSV files 'summarize' is a logical indicating whether a
# summary of the data should be printed to the console; the default is
# FALSE
# --- Assert construct file name Directory is pre-appended to file name.
# Use sprintf() to add leading zeroes.  E.g. 'specdata/001.csv'
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
# --- Assert read csv
rawDfr <- read.csv(fileStr)
# --- Assert summary if true
if (summarize) {
print(summary(rawDfr))
}
# --- Return value is a data frame
return(rawDfr)
}
complete("specdata", 1)
