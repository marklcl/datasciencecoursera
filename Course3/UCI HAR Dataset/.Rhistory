a <- available.packages ()
head(rownames(a), 3)
head(rownames(k), 10)
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("slidify")
install.packages("ggplot2")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
"     defaults write org.R-project.R force.LANG en_US.UTF-8
"
install.packages("KernSmooth")
"     defaults write org.R-project.R force.LANG en_US.UTF-8
"
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
x <- 1:20
x
x <- c(4, TRUE)
class
class()
class (x)
x <- 4
class (x)
y <- c(4, TRUE)
class (y)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a","b",TRUE)
x
x[[2]]
x <- 1:4
y <- 2:3
z <- x+y
z
class (z)
class (x)
x <- c(3,5,1,10,12,6)
x[x<=5] <- 0
x
clear
hw1_data <- read.csv("~/datasciencecoursera/datasciencecoursera/hw1_data.csv")
View(hw1_data)
is.na(Ozone)
is.na
hw1_data$Ozone
x <- hw1_data$Ozone
x
is.na (x)
bad <- is.na (x)
x(!bad)
x[!bad]
x
mean x[!bad]
install.packages("swirl")
library("swirl")
ls()
mean(x)
y <- x[!bad]
y
mean(y)
rm(list=ls())
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x & x>0)]
x[!is.na(x) & x > 0]
z <- x[c(3,5,7)]
z <- x[vector c(3,5,7)]
info()
Z <- x[c( 3,5,7)]
[c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
indentical(vect,vect2)
identifcal(vect, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
rm(list)
rm(list(ls))
rm(list=ls())
hw1_data
hw1_data <- read.csv("~/datasciencecoursera/datasciencecoursera/hw1_data.csv")
View(hw1_data)
hw1_data
x <- hw1_data[Month = 6]
hw1_data
x <- hw1_data["Month" = 6]
x <- hw1_data[c("Month" = 6)]
x
x <- hw1_data[c("Temp", Month = 6)]
x <- hw1_data[ c("Temp", "Month" = 6)]
x <- hw1_data[[c("Temp", "Month" = 6)]]
x <- hw1_data$Temp
x
x <- hw1_data$Temp[c("Month" = 6)]
x
x <- hw1_data$Temp, hw1_data$Month=6
x <- hw1_data$Temp
x
x <- hw1_data[c("Temp", 32:61)]
x <- hw1_data[c(32:61)]
x <- hw1_data[c(32,61)]
hw1_data
x <- hw1_data[[c(32:61)]]
hw1_data[[c(32,61)]]
x <- hw1_data$Temp
x
x <- hw1_data$Temp(32)
x <- subset(hw1_data, Month = 6)
x
x <- subset(hw1_data, Month ==6)
x
mean Temp
mean (Temp)
y <- x$Temp
y
mean(y)
z <- subset(hw1_data, Ozone ==31, Temp == 90)
z
a <- subset(hw1_data, Ozone --31)
a <- subset(hw1_data, Ozone ==31)
a
z <- subset(hw1_data, Ozone > 31, Temp > 90)
z
a <- subset(hw1_data, Ozone >31)
a
z <- subset(a, Temp > 90)
z
s <- z$Solar.R
s
mean(s)
x <-list(2,"a","b",TRUE)
x
x[[2]]
rm
library(datasets)
data(iris)
?iris
Sepal.Length
ls
iris
?mean
View(iris)
subset_iris <- subset(iris, iris[, "Species"] "virginica")
?subset
subset_iris <- subset(iris, iris$Species == "virginica")
subset_iris
mean(subset_iris)
mean(subset_iris$Sepal.Length)
?apply
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
View(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
debug(ls)
ls
ls
debug(ls)
ls
abs(mean(mtcars[mtcarscyl==4,]hp) - mean(mtcars[mtcarscyl==8,]hp))
abs(mean(mtcars[mtcarscyl== 4,]hp) - mean(mtcars[mtcarscyl== 8,]hp))
debug(ls)
ls
?ls
debug(ls)
ls()
quit
exit
install.packages("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactor = FALSE)
?read.csv
mydf <- read.csv(file = path2csv, stringAsFactor = FALSE)
mydf <- read.csv(file = "path2csv", stringAsFactor = FALSE)
?read.csv
mydf <- read.csv("path2csv", stringAsFactor = FALSE)
mydf <- read.csv(path2csv, stringAsFactor = FALSE)
setwd("~/datasciencecoursera/Course 3")
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran, ip_id, package, country)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size == 100500 | r_os == "linux-gnu")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, r_os == "linux-gnu" | size > 100500)
info()
filter(cran, r_os == "linux-gnu" | size > 100500)
?manip
filter(cran, size > 100500)
filter(cran, r_os == "linux-gnu" , size > 100500)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na())
filter(cran, r_version == !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb /2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean())
summarize(by_package)
summarize(by_package. mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
?n
submit()
submit()
submit()
sumbit()
submit()
submit()
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
View(pack_sum)
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
reset()
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
?n
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
submit()
View(pack_sum)
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
source('/var/folders/tq/243vx8493nb_tn3q7t6v5l1w0000gn/T//RtmpRcMmlT/summarize1.R')
submit()
View(pack_sum)
View(pack_sum)
pack_sum
exit
exit()
info()
bye()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "53509b603fa31c58e74c", "0c43b01634afff23724207eaf5e7660a9bf60823")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
gtoken <- config(token = github_token)
myapp <- oauth_app("github", "53509b603fa31c58e74c", "0c43b01634afff23724207eaf5e7660a9bf60823")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.package("httpuv")
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
> stop_for_status(req) > content(req)
stop_for_status(req) > content(req)
stop_for_status(req) > content(req)
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(sqldf)
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("RMySQL")
library("sqldf")
install.packages("RMySQL")
install.packages("sqldf")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(sqldf)
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
setwd("~/Downloads")
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
acs <- read.csv("getdata-data-ss06pid.csv", header=T, sep=",")
acs <- read.csv("./getdata_data_ss06pid.csv", header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
View(acs)
setwd("~/datasciencecoursera/Course3")
pwd
pwd
setwd("~/datasciencecoursera/Course3/UCI HAR Dataset")
source("run_analysis.R")
data <- read.table("data_set_with_averages.txt")
data <- read.table("data_set_with_the_averages.txt")
View(data)
setwd("~/datasciencecoursera/datasciencecoursera/Course3/UCI HAR Dataset")
